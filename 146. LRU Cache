// use LinkedHashMap to implement LRU Cache
// override removeEldestEntry()

class LRUCache {

    Map<Integer, Integer> map;
    
    public LRUCache(int capacity) {
    // capacity - initial capacity
    // 0.75 - load factor
    // true - access order    false - insertion order
        map = new LinkedHashMap<Integer, Integer>(capacity, 0.75f, true) {
            @Override
            protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {
                return map.size() > capacity;
            }
        };
    }
    
    public int get(int key) {
        return map.getOrDefault(key, -1);
    }
    
    public void put(int key, int value) {
        map.put(key, value);
    }
}
