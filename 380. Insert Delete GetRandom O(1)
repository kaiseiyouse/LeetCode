// use a hashmap and a arraylist to achieve the purpose.
// hashmap to record the position, arraylist for random access.
// when removing a value, swap the last val to fill its position, keeping list compact and without empty entry.

class RandomizedSet {

    Map<Integer, Integer> map;
    List<Integer> list;
    Random random;
    
    /** Initialize your data structure here. */
    public RandomizedSet() {
        // <value, position>
        map = new HashMap<>();
        
        // values
        list = new ArrayList<>();
        
        random = new Random();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if (map.containsKey(val)) return false;
        map.put(val, list.size());
        list.add(val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if (!map.containsKey(val)) return false;
        int lastVal = list.get(list.size() - 1);
        int pos = map.get(val);
        map.put(lastVal, pos);
        map.remove(val);
        list.set(pos, lastVal);
        list.remove(list.size() - 1);
        return true;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        if (list.size() == 0) return -1;
        return list.get(random.nextInt(list.size()));
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
