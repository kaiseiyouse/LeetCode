// Fisher-Yates Algorithm
// on each iteration, current number with index i will be randomly swapped with numbers with index >= i.
// finally, each number has a chance of 1/n sitting at its final position.

class Solution {
    // maintain the initial configuration
    int[] original;
    
    // array to be shuffled
    int[] array;
    
    Random rand;
    
    public Solution(int[] nums) {
        original = nums.clone();
        array = nums.clone();
        rand = new Random();
    }
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        array = original.clone();
        return array;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        for (int i = 0; i < array.length; i++) {
            int rndInt = rand.nextInt(array.length - i) + i;
            int temp = array[rndInt];
            array[rndInt] = array[i];
            array[i] = temp;
        }
        return array;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.reset();
 * int[] param_2 = obj.shuffle();
 */
